#version 450
#extension GL_ARB_separate_shader_objects : enable

uint MWC64X(inout uvec2 state)
{
    //enum _dummy { A=4294883355U };
    uint A = 4294883355U ;
    uint x=(state).x, c=(state).y;  // Unpack the state
    uint res=x^c;                     // Calculate the result
    //uint hi=mul_hi(x,A);              // Step the RNG
    uint hi  = (x*A);
    x=x*A+c;
    c=hi+ uint(x<c);
    state = uvec2(x,c);               // Pack the state back up
    return res;                       // Return the next result
}

float random (const vec2 state) {
    return fract(sin(dot(state.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

float randomGaussian(inout uvec2 rand_state)
{
    float sum = 0.0f;
    int tmp_rand;
    for(int i = 0; i < 12; i++)
    {
        sum += MWC64X(rand_state) / 4294967296.0f;
    }
    sum /= 12.0f;
    return sum;
}

layout(binding = 0) buffer inputPopulationValueBuffer
{
   float inputPopulationValuePayload[];
};
layout(binding = 1) buffer inputPopulationStepBuffer
{
   float inputPopulationStepPayload[];
};
layout(binding = 2) buffer inputPopulationFitnessBuffer
{
   float inputPopulationFitnessPayload[];
};

layout(binding = 3) buffer outputPopulationValueBuffer
{
   float outputPopulationValuePayload[];
};
layout(binding = 4) buffer outputPopulationStepBuffer
{
   float outputPopulationStepPayload[];
};
layout(binding = 5) buffer outputPopulationFitnessBuffer
{
   float outputPopulationFitnessPayload[];
};

layout(binding = 6) buffer randomStatesBuffer
{
   uvec2 randomStatesPayload[];
};

layout(binding = 7) buffer paramMinBuffer
{
   float paramMinPayload[];
};
layout(binding = 8) buffer paramMaxBuffer
{
   float paramMaxPayload[];
};

layout(binding = 9) buffer outputAudioBuffer
{
   float outputAudioPayload[];
};

layout(binding = 10) buffer inputFFTDataBuffer
{
   float inputFFTDataPayload[];
};
layout(binding = 11) buffer inputFFTTargetBuffer
{
   float inputFFTTargetPayload[];
};
layout(binding = 12) buffer rotationIndexBuffer
{
   uint rotationIndexPayload;
};
layout( push_constant ) uniform index{int rotationIndex;} RotationIndex;

layout (constant_id = 1) const uint WORKGROUP_X = 32;
layout (constant_id = 2) const uint WORKGROUP_Y = 1;
layout (constant_id = 3) const uint WORKGROUP_Z = 1;
layout (constant_id = 4) const uint WRKGRPSIZE = 32;
layout (constant_id = 5) const uint NUM_DIMENSIONS = 4;

layout(constant_id = 6) const uint POPULATION_COUNT = 1536;
layout(constant_id = 7) const uint NUM_WGS_FOR_PARENTS = 192 / 32; //Need to work out? In GPU_Match CPU code??
layout(constant_id = 8) const uint CHUNK_SIZE_FITNESS = (32 / 2);
layout(constant_id = 9) const uint AUDIO_WAVE_FORM_SIZE = 1024;

layout(constant_id = 10) const uint FFT_OUT_SIZE = 1023;
layout(constant_id = 11) const uint FFT_HALF_SIZE = 512;
layout(constant_id = 12) const float FFT_ONE_OVER_SIZE = 1 / 1023;
layout(constant_id = 13) const float FFT_ONE_OVER_WINDOW_FACTOR = 1.0;

layout(constant_id = 14) const float M_PI = 3.14159265358979323846;
layout(constant_id = 15) const float ALPHA = 1.4;
layout(constant_id = 16) const float ONE_OVER_ALPHA = 1 / 1.4;
layout(constant_id = 17) const float ROOT_TWO_OVER_PI = 0.797884561;
layout(constant_id = 18) const float BETA_SCALE = 0.25;
layout(constant_id = 19) const float BETA = 0.5;

/* We synthesise the wave in chunks. The size of the chunks is defined here in
 * terms of the work group size. The synthesis is done in chunks to avoid local
 * memory getting to big. This should really be tuned based on the hardware. */
layout (constant_id = 20) const uint CHUNKS_PER_WG_SYNTH = 1;
layout (constant_id = 21) const uint CHUNK_SIZE_SYNTH = 32/1;
/* Constant used for FM synthesis */
layout (constant_id = 22) const float ONE_OVER_SAMPLE_RATE_TIMES_2_PI = 0.00014247573;

//Population size to index into flat array//
layout(constant_id = 23) const uint POPULATION_SIZE = 1536 * (4);

layout (local_size_x_id = 1, local_size_y_id = 2) in;

/* Local arrays to hold a section of the parent population. */
shared float group_steps[NUM_DIMENSIONS * WRKGRPSIZE];
shared float group_values[NUM_DIMENSIONS * WRKGRPSIZE];

/*------------------------------------------------------------------------------
    Mutate
------------------------------------------------------------------------------*/
void main()
{
    //Set all work item IDs//
    uint gid = gl_GlobalInvocationID.x;
    uint tid = gl_LocalInvocationID.x;
    uint wid = gl_WorkGroupID.x;

    uint populationStartIndex = rotationIndexPayload * POPULATION_SIZE;

    inputPopulationValuePayload[populationStartIndex + gid]= MWC64X(randomStatesPayload[gid]) /  4294967296.0f;

   ///* Load the population into local memory */
   //for(int i = 0; i < NUM_DIMENSIONS; i++)
   //{
   //    group_steps[WRKGRPSIZE * i + tid] =
   //        inputPopulationValuePayload[populationStartIndex + (WRKGRPSIZE * NUM_DIMENSIONS *
   //                            wid + WRKGRPSIZE * i + tid)];
   //    group_values[WRKGRPSIZE * i + tid] =
   //        inputPopulationStepPayload[populationStartIndex + (WRKGRPSIZE * NUM_DIMENSIONS *
   //                             wid + WRKGRPSIZE * i + tid)];
   //}
   //
   ///* Mutation happens here. Each workitem mutates one member of the population */
   //
   ///* Randomly choose Ek. If Recombination was more random, it might be worth
   //using index % 2 as the coin toss. */
   //
   ////int randomInt = int((random(randomStatesPayload[gid]) * 2) * 2147483647);
   //float Ek = ( MWC64X(randomStatesPayload[gid]) % 2 == 0) ? ALPHA : ONE_OVER_ALPHA;
   ////float Ek = ( randomInt % 2 == 0) ? ALPHA : ONE_OVER_ALPHA;
   ////float Ek = (gid % 2 == 0) ? ALPHA : ONE_OVER_ALPHA;
   //
   //for(int j = 0; j < NUM_DIMENSIONS; j++)
   //{
   //    float s = group_steps[NUM_DIMENSIONS * tid + j];
   //    float x = group_values[NUM_DIMENSIONS * tid + j];
   //
   //    //float gauss = MWC64X(randomStatesPayload[gid]) /  4294967296.0f;
   //    float gauss = randomGaussian(randomStatesPayload[gid]);
   //    float new_x = x + Ek * s * gauss;
   //
   //    if(new_x < 0.0f || new_x > 1.0f)
   //    {
   //        /* Rather than generating another gaussian random number, simply
   //        flip it and scale it down. */
   //        gauss = gauss * -0.5;
   //        new_x = x + Ek * s * gauss;
   //        //new_x = MWC64X(randomStatesPayload[gid]) /  4294967296.0f;
   //        //new_x = randomGaussian(randomStatesPayload[gid]);
   //    }
   //
   //    float Ps = abs (gauss) - ROOT_TWO_OVER_PI;
   //    float Es = exp ( Ps );
   //    s *= pow(Ek, BETA) * pow(Es, BETA_SCALE);
   //
   //    group_steps[NUM_DIMENSIONS * tid + j] = s;
   //    group_values[NUM_DIMENSIONS * tid + j] = new_x;
   //}
   //group_values[NUM_DIMENSIONS * tid + 3] = 1.0;
   //
   //// Write back into global memory
   //for(int i = 0; i < NUM_DIMENSIONS; i++)
   //{
   //    inputPopulationStepPayload[populationStartIndex + (WRKGRPSIZE * NUM_DIMENSIONS * wid + WRKGRPSIZE * i + tid)] =
   //        group_steps[WRKGRPSIZE * i + tid];
   //    inputPopulationValuePayload[populationStartIndex + (WRKGRPSIZE * NUM_DIMENSIONS * wid + WRKGRPSIZE * i + tid)] =
   //        group_values[WRKGRPSIZE * i + tid];
   //}

    //inputPopulationValuePayload[0] = 0.411931818;
    //inputPopulationValuePayload[1] = 0.375;
    //inputPopulationValuePayload[2] = 0.0568181818;
    //inputPopulationValuePayload[3] = 1.0;
}