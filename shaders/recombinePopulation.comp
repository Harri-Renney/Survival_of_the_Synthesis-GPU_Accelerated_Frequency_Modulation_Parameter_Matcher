#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) buffer inputPopulationValueBuffer
{
   float inputPopulationValuePayload[];
};
layout(binding = 1) buffer inputPopulationStepBuffer
{
   float inputPopulationStepPayload[];
};
layout(binding = 2) buffer inputPopulationFitnessBuffer
{
   float inputPopulationFitnessPayload[];
};

layout(binding = 3) buffer outputPopulationValueBuffer
{
   float outputPopulationValuePayload[];
};
layout(binding = 4) buffer outputPopulationStepBuffer
{
   float outputPopulationStepPayload[];
};
layout(binding = 5) buffer outputPopulationFitnessBuffer
{
   float outputPopulationFitnessPayload[];
};

layout(binding = 6) buffer randomStatesBuffer
{
   uvec2 randomStatesPayload[];
};

layout(binding = 7) buffer paramMinBuffer
{
   float paramMinPayload[];
};
layout(binding = 8) buffer paramMaxBuffer
{
   float paramMaxPayload[];
};

layout(binding = 9) buffer outputAudioBuffer
{
   float outputAudioPayload[];
};

layout(binding = 10) buffer inputFFTDataBuffer
{
   float inputFFTDataPayload[];
};
layout(binding = 11) buffer inputFFTTargetBuffer
{
   float inputFFTTargetPayload[];
};
layout(binding = 12) buffer rotationIndex
{
   int rotationIndexPayload;
};
layout(binding = 13) buffer wavetableBuffer
{
   float wavetablePayload[];
};
layout( push_constant ) uniform index{int rotationIndex;} RotationIndex;

layout (constant_id = 1) const uint WORKGROUP_X = 32;
layout (constant_id = 2) const uint WORKGROUP_Y = 1;
layout (constant_id = 3) const uint WORKGROUP_Z = 1;
layout (constant_id = 4) const uint WRKGRPSIZE = 32;
layout (constant_id = 5) const uint NUM_DIMENSIONS = 4;

layout(constant_id = 6) const uint POPULATION_COUNT = 1536;
layout(constant_id = 7) const uint NUM_WGS_FOR_PARENTS = 192 / 32; //Need to work out? In GPU_Match CPU code??
layout(constant_id = 8) const uint CHUNK_SIZE_FITNESS = (32 / 2);
layout(constant_id = 9) const uint AUDIO_WAVE_FORM_SIZE = 1024;

layout(constant_id = 10) const uint FFT_OUT_SIZE = 1023;
layout(constant_id = 11) const uint FFT_HALF_SIZE = 512;
layout(constant_id = 12) const float FFT_ONE_OVER_SIZE = 1 / 1023;
layout(constant_id = 13) const float FFT_ONE_OVER_WINDOW_FACTOR = 1.0;

layout(constant_id = 14) const float M_PI = 3.14159265358979323846;
layout(constant_id = 15) const float ALPHA = 1.4;
layout(constant_id = 16) const float ONE_OVER_ALPHA = 1 / 1.4;
layout(constant_id = 17) const float ROOT_TWO_OVER_PI = 0.797884561;
layout(constant_id = 18) const float BETA_SCALE = 0.25;
layout(constant_id = 19) const float BETA = 0.5;

/* We synthesise the wave in chunks. The size of the chunks is defined here in
 * terms of the work group size. The synthesis is done in chunks to avoid local
 * memory getting to big. This should really be tuned based on the hardware. */
layout (constant_id = 20) const uint CHUNKS_PER_WG_SYNTH = 1;
layout (constant_id = 21) const uint CHUNK_SIZE_SYNTH = 32/1;
/* Constant used for FM synthesis */
layout (constant_id = 22) const float ONE_OVER_SAMPLE_RATE_TIMES_2_PI = 0.00014247573;

//Population size to index into flat array//
layout(constant_id = 23) const uint POPULATION_SIZE = 1536 * (4);

layout (local_size_x_id = 1, local_size_y_id = 2) in;

/* Local arrays to hold a section of the parent population.
We have source and destination arrays to prevent workitems overwriting
cells which have not yet been read by other workitems */
shared float group_population_values[NUM_DIMENSIONS * WRKGRPSIZE];
shared float group_population_steps[NUM_DIMENSIONS * WRKGRPSIZE];
shared float group_population_values_recombined[NUM_DIMENSIONS * WRKGRPSIZE];
shared float group_population_steps_recombined[NUM_DIMENSIONS * WRKGRPSIZE]; 

/*------------------------------------------------------------------------------
    Recombine
------------------------------------------------------------------------------*/
void main()
{
    //Set all work item IDs//
    uint gid = gl_GlobalInvocationID.x;
    uint tid = gl_LocalInvocationID.x;
    uint wid = gl_WorkGroupID.x;

   uint populationStartIndex = rotationIndexPayload * POPULATION_SIZE;

    /* This kernel runs with the population size number of workitems but we only
    want to recombine the parent population.

    A lot of the workitems will have a local index greater than the parent
    population.

    So we change the group number of groups which are aligned with offspring so
    that they point at parents. */
    uint group_id_mod = wid % NUM_WGS_FOR_PARENTS;

    /* Load parent population data into local memory.
    Groups with the same group_id_mod value will load the same set of parents */

    uint global_block_start_index = group_id_mod * WRKGRPSIZE * NUM_DIMENSIONS;
    for(int i = 0; i < NUM_DIMENSIONS; i++)
    {
        uint local_block_index = WRKGRPSIZE * i + tid;
        group_population_values[local_block_index] = inputPopulationValuePayload[populationStartIndex + (global_block_start_index +
                local_block_index)];
        group_population_steps[local_block_index] = inputPopulationStepPayload[populationStartIndex + (global_block_start_index +
                local_block_index)];
    }

    /* We now have every workgroup storing a contiguous section of the parent
    population in local memory. */

    uint start_idx = tid * NUM_DIMENSIONS;
    uint shift_amt;
    uint new_idx;

    /* This is where recombination happens.
    Each value and step is shifted to a new position in the local data.
    The source and destination indices are determined by the group id and the
    dimension of the value.

    TODO: So there is an important limitation for this method of recombination:
     - Mixing is restricted to the section of the parent population
     contained in the workgroup's local memory.
     - Mixing within workgroups is not random and may not even be good. */
    for(int i = 0; i < NUM_DIMENSIONS; i++)
    {
        shift_amt = NUM_DIMENSIONS * (i * (wid + 1));
        new_idx = (start_idx + shift_amt) % ( WRKGRPSIZE * NUM_DIMENSIONS);
        group_population_values_recombined[new_idx] = group_population_values[start_idx];
        group_population_steps_recombined[new_idx] = group_population_steps[start_idx];
        start_idx++;
    }

    /* Now load the recombined population back into global memory. */
    global_block_start_index = wid * WRKGRPSIZE * NUM_DIMENSIONS;
    for(int i = 0; i < NUM_DIMENSIONS; i++)
    {
        uint local_block_index = WRKGRPSIZE * i + tid;
        inputPopulationValuePayload[populationStartIndex + (global_block_start_index + local_block_index)]  =
            group_population_values_recombined[local_block_index];
        inputPopulationStepPayload[populationStartIndex + (global_block_start_index + local_block_index)]  =
            group_population_steps_recombined[local_block_index];
    }
}