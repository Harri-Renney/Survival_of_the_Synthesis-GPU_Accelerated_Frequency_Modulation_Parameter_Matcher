#version 450
#extension GL_ARB_separate_shader_objects : enable

float random (const vec2 state) {
    return fract(sin(dot(state.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

layout(binding = 0) buffer inputPopulationValueBuffer
{
   float inputPopulationValuePayload[];
};
layout(binding = 1) buffer inputPopulationStepBuffer
{
   float inputPopulationStepPayload[];
};
layout(binding = 2) buffer inputPopulationFitnessBuffer
{
   float inputPopulationFitnessPayload[];
};

layout(binding = 3) buffer outputPopulationValueBuffer
{
   float outputPopulationValuePayload[];
};
layout(binding = 4) buffer outputPopulationStepBuffer
{
   float outputPopulationStepPayload[];
};
layout(binding = 5) buffer outputPopulationFitnessBuffer
{
   float outputPopulationFitnessPayload[];
};

layout(binding = 6) buffer randomStatesBuffer
{
   vec2 randomStatesPayload[];
};

layout(binding = 7) buffer paramMinBuffer
{
   float paramMinPayload[];
};
layout(binding = 8) buffer paramMaxBuffer
{
   float paramMaxPayload[];
};

layout(binding = 9) buffer outputAudioBuffer
{
   float outputAudioPayload[];
};

layout(binding = 10) buffer inputFFTDataBuffer
{
   float inputFFTDataPayload[];
};
layout(binding = 11) buffer inputFFTTargetBuffer
{
   float inputFFTTargetPayload[];
};
layout(binding = 12) buffer rotationIndexBuffer
{
   uint rotationIndexPayload;
};
layout( push_constant ) uniform index{uint rotationIndex;} RotationIndex;

layout (constant_id = 1) const uint WORKGROUP_X = 32;
layout (constant_id = 2) const uint WORKGROUP_Y = 1;
layout (constant_id = 3) const uint WORKGROUP_Z = 1;
layout (constant_id = 4) const uint WRKGRPSIZE = 32 * 1;
layout (constant_id = 5) const uint NUM_DIMENSIONS = 4;

layout(constant_id = 6) const uint POPULATION_COUNT = 1536;
layout(constant_id = 7) const uint NUM_WGS_FOR_PARENTS = 192 / 32; //Need to work out? In GPU_Match CPU code??
layout(constant_id = 8) const uint CHUNK_SIZE_FITNESS = (32 / 2);
layout(constant_id = 9) const uint AUDIO_WAVE_FORM_SIZE = 1024;

layout(constant_id = 10) const uint FFT_OUT_SIZE = 1023;
layout(constant_id = 11) const uint FFT_HALF_SIZE = 512;
layout(constant_id = 12) const float FFT_ONE_OVER_SIZE = 1 / 1023;
layout(constant_id = 13) const float FFT_ONE_OVER_WINDOW_FACTOR = 1.0;

layout(constant_id = 14) const float M_PI = 3.14159265358979323846;
layout(constant_id = 15) const float ALPHA = 1.4;
layout(constant_id = 16) const float ONE_OVER_ALPHA = 1 / 1.4;
layout(constant_id = 17) const float ROOT_TWO_OVER_PI = 0.797884561;
layout(constant_id = 18) const float BETA_SCALE = 0.25;
layout(constant_id = 19) const float BETA = 0.5;

/* We synthesise the wave in chunks. The size of the chunks is defined here in
 * terms of the work group size. The synthesis is done in chunks to avoid local
 * memory getting to big. This should really be tuned based on the hardware. */
layout (constant_id = 20) const uint CHUNKS_PER_WG_SYNTH = 2;
layout (constant_id = 21) const uint CHUNK_SIZE_SYNTH = WRKGRPSIZE/CHUNKS_PER_WG_SYNTH;
/* Constant used for FM synthesis */
layout (constant_id = 22) const float ONE_OVER_SAMPLE_RATE_TIMES_2_PI = 0.00014247573;

//Population size to index into flat array//
layout(constant_id = 23) const uint POPULATION_SIZE = 1536 * (4);

layout (local_size_x_id = 1, local_size_y_id = 2) in;

//Local array with population values//
shared float group_population_values[WRKGRPSIZE * NUM_DIMENSIONS];
//Local array to hold the current chunk of output for each work item//
shared float audio_chunks[WRKGRPSIZE * CHUNK_SIZE_SYNTH];

/*------------------------------------------------------------------------------
    Synthesise
     - Each work item synthesises the entire wave for a population member's
       set of parameters. This is a simple FM synthesiser.
------------------------------------------------------------------------------*/
void main()
{
   //Set all work item IDs//
   uint gid = gl_GlobalInvocationID.x;
   uint tid = gl_LocalInvocationID.x;
   uint wid = gl_WorkGroupID.x;

   uint populationStartIndex = rotationIndexPayload * POPULATION_SIZE;

   const int pop_index = int(tid * NUM_DIMENSIONS);
   float params_scaled[4];

   /* Fill a local array with population values, 1 per workitem */
   for(int i = 0; i < NUM_DIMENSIONS; i++)
   {
      group_population_values[WRKGRPSIZE * i + tid] = inputPopulationValuePayload[populationStartIndex + (WRKGRPSIZE *
               NUM_DIMENSIONS * wid + WRKGRPSIZE * i + tid)];
   }

   /* Scale the synthesis parameters */
   for(int i = 0; i < NUM_DIMENSIONS; i++)
   {
      params_scaled[i] = paramMinPayload[i] + group_population_values[pop_index + i] *
                        (paramMaxPayload[i] - paramMinPayload[i]);
   }

   //Clarify population parameters to respective variables//
   float modIdxMulModFreq = params_scaled[0] * params_scaled[1];
   float carrierFreq  = params_scaled[2];
   float carrierAmp = params_scaled[3];

   //Use the wavetable positions to track where we are at each frame of synthesis//
   float wave_table_pos_1 = 0.0f;
   float wave_table_pos_2 = 0.0f;

   float cur_sample = 0.0;

   int local_id_mod_chunk = int(tid % CHUNK_SIZE_SYNTH);

   //As the chunk size can be smaller than the workgroup size, we need to know which chunk this work item operates on//
   int local_chunk_index = int(tid / CHUNK_SIZE_SYNTH);

   /* Current index to write back to global memory coelesced. Initialise for the first iteration. */
   int out_index = int((AUDIO_WAVE_FORM_SIZE * (WRKGRPSIZE * wid + local_chunk_index)) +
                  local_id_mod_chunk);

   /* 
   * Perform synthesis in chunks as a single waveform output can be very long.
   * In each iteration of this outer loop, each work item synthesises a chunk of the wave then the work group
   * writes back to global memory.
   */
   for(int i = 0; i < AUDIO_WAVE_FORM_SIZE / CHUNK_SIZE_SYNTH; i++)
   {
      for(int j = 0; j < CHUNK_SIZE_SYNTH; j++)
      {
         cur_sample = sin(wave_table_pos_1 * ONE_OVER_SAMPLE_RATE_TIMES_2_PI) * modIdxMulModFreq +
                        carrierFreq;
         audio_chunks[tid * CHUNK_SIZE_SYNTH + j] = sin(wave_table_pos_2 *
                  ONE_OVER_SAMPLE_RATE_TIMES_2_PI) * carrierAmp;
         wave_table_pos_1 += params_scaled[0];
         wave_table_pos_2 += cur_sample;

      }
      int out_index_local = int(local_chunk_index * CHUNK_SIZE_SYNTH + local_id_mod_chunk);
      for(int j = 0; j < CHUNK_SIZE_SYNTH; j++)
      {
         outputAudioPayload[out_index] = audio_chunks[out_index_local];
         out_index += int(CHUNKS_PER_WG_SYNTH * AUDIO_WAVE_FORM_SIZE);
         out_index_local += int(CHUNKS_PER_WG_SYNTH * CHUNK_SIZE_SYNTH);
      }
      out_index -= int((CHUNKS_PER_WG_SYNTH * AUDIO_WAVE_FORM_SIZE - 1) *  CHUNK_SIZE_SYNTH);
   }
   //outputAudioPayload[0] = 12.0;
   //inputFFTDataPayload[0] = 12.0;
}